import time
import streamlit as st
import pandas as pd

from datetime import datetime, timedelta
from streamlit_option_menu import option_menu
import streamlit.components.v1 as components
import config_ini
from ts_db import Teo_DB

from utils import utils

######### Read Config.ini #########
path = "config.ini"
    # font = get_setting(path, 'Settings', 'font')
    # font_size = get_setting(path, 'Settings', 'font_size')
    
    # update_setting(path, "Settings", "font_size", "12")
    # delete_setting(path, "Settings", "font_style")

PATH_DB = config_ini.get_setting(path, 'db_local', 'PATH_DB')
NAME_DB = config_ini.get_setting(path, 'db_local', 'NAME_DB')

try:
    tsdb = Teo_DB(PATH_DB+NAME_DB)
    print ('Connection - Ok')
except Exception as e:
    print (f'Error {e}')


######### TimeSheets #########
def timesheets_create():
    st.subheader('–¢–∞–±–µ–ª—å')
    choose = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –õ–£',
                        ('–õ–æ–≥–∏—Å—Ç–∏–∫–∞', '–ú–µ–∑–æ–Ω–∏–Ω', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π'))
    if st.sidebar.button('–ü–æ–∫–∞–∑–∞—Ç—å') == True:
        components.html(utils.draw_table(), height=300, scrolling=True)

######### Acts ##########
def acts_create():
    summa = 0
    st.subheader('–ê–∫—Ç—ã –Ω–∞–µ–º–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π')
    
    act_organization = st.sidebar.selectbox('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', tsdb.get_list_organization())
    act_driver = st.sidebar.selectbox('–í–æ–¥–∏—Ç–µ–ª—å', tsdb.get_list_driver(act_organization))
    act_date = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É', tsdb.get_list_date(act_driver))
    print(tsdb.get_list_driver(act_organization), tsdb.get_list_date(act_driver))
    act_table = st.empty()
    df_acttable = tsdb.get_act_of_DD(act_date, act_driver)
    act_table.table(df_acttable)
    print (df_acttable)
    act_idcar = tsdb.get_id_car(df_acttable['–ú–∞—à–∏–Ω–∞'][0])
    params = list(tsdb.get_param(act_idcar))
    if df_acttable['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'][0] == '–ú–∏–Ω—Å–∫':
        act_hour = st.sidebar.slider('–ö–æ–ª–∏—á–µ—Ç—Å–≤–æ —á–∞—Å–æ–≤', 4, 12, 8, 1)
        summa = int(act_hour) * float(params[1])
        
    else:
        if st.sidebar.checkbox('–ó–∞–∫—Ä—ã—Ç—å —á–∞—Å–∞–º–∏', False):
        #print(tsdb.get_param(act_idcar))
            act_hour = st.sidebar.slider('–ö–æ–ª–∏—á–µ—Ç—Å–≤–æ —á–∞—Å–æ–≤', 4, 12, 8, 1)
            summa = int(act_hour) * float(params[1])
        else:
            act_km = st.sidebar.number_input('–ö–∏–ª–æ–º–µ—Ç—Ä–∞–∂')
            print(int(act_km), list(tsdb.get_param(act_idcar))[0])
            summa = int(act_km) * float(params[0])
    if df_acttable['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'][0] == '–ú–∏–Ω—Å–∫' and act_hour != 0:
        price = float(params[1])
        unit = act_hour
    else:
        price = float(params[0])
        unit = act_km
    st.sidebar.text(f'–°—É–º–º–∞ {summa}')
    if st.sidebar.button('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'):
        tsdb.add_acts(tsdb.get_id_trip(act_date, act_idcar), price, unit, summa)
        act_table.empty()
        st.info('–ê–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω')

######### Trips ############
def trips_create():
    st.subheader('–†–µ–π—Å—ã')
    trip_date = st.sidebar.date_input('–î–∞—Ç–∞ —Ä–µ–π—Å–∞', datetime.now()+timedelta(days=1))

    trip_check_town = st.sidebar.checkbox('–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞')
    trip_town = '–ú–∏–Ω—Å–∫'
    if trip_check_town:
        trip_town = st.sidebar.text_input('–ú–∞—Ä—à—Ä—É—Ç', placeholder='–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
        trip_days = st.sidebar.slider(
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏',
            1, 3, (1))
    else:
        trip_town = '–ú–∏–Ω—Å–∫'
        trip_days = 1
    trip_check_our = st.sidebar.checkbox('–ù–∞–µ–º–Ω—ã–π', value=True)
    trip_driver = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è', tsdb.get_name(trip_check_our, '–≤–æ–¥–∏—Ç–µ–ª—å', trip_date))
    trip_car = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É', tsdb.get_number_car(trip_check_our, trip_driver)[0], index=tsdb.get_number_car(trip_check_our, trip_driver)[1])
    trip_route = 0
    trip_forwarder = 0
    if not(trip_check_our):
        trip_route = st.sidebar.number_input('–ù–æ–º–µ—Ä –ø—É—Ç–µ–≤–æ–≥–æ', format="%d", value=int(tsdb.get_last_route())+1, disabled=trip_check_our)
    trip_check_forwarder = st.sidebar.checkbox('–≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä', disabled=trip_check_our)
    if trip_check_forwarder:
        
        trip_forwarder_name = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞', tsdb.get_name(trip_check_our, '—ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä'))
        trip_forwarder = tsdb.get_id_emplyee(trip_forwarder_name)
    
    if st.sidebar.button('–î–æ–±–∞–≤–∏—Ç—å'):
        tsdb.add_trips(trip_route, trip_date, tsdb.get_id_emplyee(trip_driver), trip_days, trip_town, tsdb.get_id_car(trip_car), trip_check_our, trip_forwarder)
        st.info('–†–µ–π—Å –¥–æ–±–∞–≤–ª–µ–Ω')
        
    st.text(f'–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏ –Ω–∞ : {trip_date}')
    table_trips = st.empty()
    table_trips.table(tsdb.get_trips_of_date(trip_date, False))

    if st.button('–£–≤–µ–¥–æ–º–µ–Ω–∏–µ', disabled=tsdb.get_status_message(trip_date, False)):
        table_trips.info('Sending...')
        progress_send = table_trips.progress(0)
        percent_complite = 0
        len_complite = len(tsdb.get_info_sms(trip_date, False))
        for sm in tsdb.get_info_sms(trip_date, False):
            percent_complite = percent_complite+int(100/len_complite)
            progress_send.progress(percent_complite)
            
            if sm[5]:
                sms_driver = f'{sm[1]} {sm[2]} –¥–Ω–∏:{sm[3]} {tsdb.get_number_car_clear(sm[4])} c {tsdb.get_firstname(sm[5])}'
                phone_driver = tsdb.get_phone(sm[0])
                #send sms
                print(f'Driver Number {phone_driver} text {sms_driver}')
                sms_forwarder = f'{sm[1]} {sm[2]} –¥–Ω–∏:{sm[3]} {tsdb.get_number_car_clear(sm[4])} c {tsdb.get_firstname(sm[0])}'
                phone_forwarder = tsdb.get_phone(sm[5])
                print(f'Forwarder Number {phone_forwarder} text {sms_forwarder}')
            else:
                sms_driver = f'{sm[1]} {sm[2]} –¥–Ω–∏:{sm[3]} {tsdb.get_number_car_clear(sm[4])} –±–µ–∑ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞'
                phone_driver = tsdb.get_phone(sm[0])
                #send sms
                print(f'Driver Number {phone_driver} text {sms_driver}')
            tsdb.update_status_ready(sm[6])
        table_trips.table(tsdb.get_trips_of_date(trip_date, False))
            
        
    st.text(f'–ú–∏–Ω—Å–∫ –Ω–∞ : {trip_date}')
    table_trips = st.empty()
    table_trips.table(tsdb.get_trips_of_date(trip_date, True))
    
    if st.button('–£–≤–µ–¥–æ–º–µ–Ω–∏–µ –ø–æ –ú–∏–Ω—Å–∫—É', disabled=tsdb.get_status_message(trip_date, True)):
        table_trips.info('Sending...')
        progress_send = table_trips.progress(0)
        percent_complite = 0
        len_complite = len(tsdb.get_info_sms(trip_date, True))
        for sm in tsdb.get_info_sms(trip_date, True):
            percent_complite = percent_complite+int(100/len_complite)
            progress_send.progress(percent_complite)
            
            if sm[5]:
                sms_driver = f'{sm[1]} {sm[2]} –ú–∏–Ω—Å–∫ {tsdb.get_number_car_clear(sm[4])} c {tsdb.get_firstname(sm[5])}'
                phone_driver = tsdb.get_phone(sm[0])
                #send sms
                print(f'Driver Number {phone_driver} text {sms_driver}')
                sms_forwarder = f'{sm[1]} {sm[2]} –ú–∏–Ω—Å–∫ {tsdb.get_number_car_clear(sm[4])} c {tsdb.get_firstname(sm[0])}'
                phone_forwarder = tsdb.get_phone(sm[5])
                print(f'Forwarder Number {phone_forwarder} text {sms_forwarder}')
            else:
                sms_driver = f'{sm[1]} {sm[2]} –¥–Ω–∏:{sm[3]} {tsdb.get_number_car_clear(sm[4])} –±–µ–∑ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞'
                phone_driver = tsdb.get_phone(sm[0])
                #send sms
                print(f'Driver Number {phone_driver} text {sms_driver}')
            tsdb.update_status_ready(sm[6])
        table_trips.table(tsdb.get_trips_of_date(trip_date, True))

st.set_page_config(
    page_title='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
    page_icon="üßä",
    layout="wide")
     
st.title('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞')
st.text(f'–°–µ–≥–æ–¥–Ω—è {str(datetime.now())}')

selected = option_menu(
    menu_title='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
    options=['–¢–∞–±–µ–ª—å', '–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏', '–ê–∫—Ç—ã', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
    icons=['calendar-range', 'alarm', 'card-checklist', 'tools'],
    orientation='horizontal',
    default_index=0,
    )

if selected == '–¢–∞–±–µ–ª—å':
    timesheets_create()
if selected == '–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏':
    trips_create()
if selected == '–ê–∫—Ç—ã':
    acts_create()



